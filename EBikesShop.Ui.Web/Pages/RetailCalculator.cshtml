@page "/retailcalculator"

<h1>Retail calculator</h1>

<div class="form-group">
    <p>
        Number of items:<br />
        <input class="form-control" type="number" step="any" bind="@_items" id="retailCalculator_numberOfItems_input" />
    </p>

    <p>
        Price per item:<br />
        <input class="form-control" type="number" step="any" bind="@_pricePerItem" id="retailCalculator_pricePerItem_input" />
    </p>

    <p>
        State code:<br />
        <select class="form-control" bind="@_selectedStateTaxRate" id="retailCalculator_state_select">
            <option value="0.0">none</option>
            @foreach (var state in _states)
            {
                <option value=@state.TaxRate>@state.Code</option>
            }
        </select>
    </p>

    <p>
        Total price:
        <div class="form-control" id="retailCalculator_totalPrice_text">@_totalPrice</div>
    </p>

    <button class="btn btn-primary" onclick="@CalculateTotalPrice" id="retailCalculator_calculateTotalPrice_button">Calculate total price</button>
</div>

@functions 
{
    private decimal _totalPrice = 0m;

    private int _items = 1;
    private decimal _pricePerItem = 0m;

    private decimal _selectedStateTaxRate;
    private List<StateTax> _states = new List<StateTax>();

    protected override async Task OnInitAsync()
    {
        _states = await GetStatesAsync();
        _selectedStateTaxRate = _states.Single(x => string.Equals("UT", x.Code, StringComparison.OrdinalIgnoreCase)).TaxRate;
    }

    private async Task<List<StateTax>> GetStatesAsync()
    {
        await Task.Delay(1000); // simulate API call

        return new List<StateTax>
        {
            new StateTax{ Code = "UT", TaxRate = 6.85m },
            new StateTax{ Code = "NV", TaxRate = 8.00m },
            new StateTax{ Code = "TX", TaxRate = 6.25m },
            new StateTax{ Code = "AL", TaxRate = 4.00m },
            new StateTax{ Code = "CA", TaxRate = 8.25m },
        };
    }

    private void CalculateTotalPrice()
    {
        var price = _items * _pricePerItem;
        var discountRate = GetDiscountRate(price);

        var discount = price * discountRate / 100m;
        price = price - discount;
        var tax = price * _selectedStateTaxRate / 100m;
        _totalPrice = price + tax;
    }

    private decimal GetDiscountRate(decimal price)
    {
        var discountRate = 0m;
        if (price >= 50000m)
        {
            discountRate = 15m;
        }
        else if (price >= 10000m)
        {
            discountRate = 10m;
        }
        else if (price >= 7000m)
        {
            discountRate = 7m;
        }
        else if (price >= 5000m)
        {
            discountRate = 5m;
        }
        else if (price >= 1000m)
        {
            discountRate = 3m;
        }
        return discountRate;
    }

    public class StateTax
    {
        public string Code { get; set; }
        public decimal TaxRate { get; set; }
    }
}
